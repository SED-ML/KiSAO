name: Test and release

on:
  push:

jobs:
  test:
    name: Run unit tests on the ontology
    runs-on: ubuntu-latest
    steps:
      # Check out the repository
      - name: Checkout repo
        uses: actions/checkout@master
        with:
          fetch-depth: 1

      # Install the requirements for the tests
      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Setup pip cache
        uses: actions/cache@v2
        with:
          path: /opt/hostedtoolcache/Python
          key: ${{ runner.os }}-pip-${{ hashFiles('libkisao/python/requirements.txt') }}-${{ hashFiles('libkisao/python/tests/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install pip and setuptools
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade setuptools

      - name: Install the Python KiSAO package
        working-directory: libkisao/python
        run: |
          python -m pip install .

      # Lint the package
      - name: Install flake8
        run: python -m pip install flake8

      - name: Lint the package
        working-directory: libkisao/python
        run: python -m flake8

      # Run the tests
      - name: Install the requirements for the tests
        working-directory: libkisao/python
        run: |
          python -m pip install pytest pytest-cov
          python -m pip install -r tests/requirements.txt

      - name: Run the tests
        run: python -m pytest tests/ --cov

      # Compile documentation
      - name: Install the requirements for compiling the documentation
        run: python -m pip install -r docs-src/requirements.txt

      - name: Compile the documentation
        run: |
          sphinx-apidoc . setup.py --output-dir docs-src/source --force --module-first --no-toc
          mkdir -p docs-src/_static
          sphinx-build docs-src docs

      - name: Upload the coverage report to Codecov
        if: false
        uses: codecov/codecov-action@v1.0.3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: unittests
          file: ./coverage.xml

  commitCompiledDocumentation:
    name: Commit and push compiled documentation to GitHub
    if: startsWith(github.ref, 'refs/tags/')
    needs:
      - test
    runs-on: ubuntu-latest
    steps:
      # Check out the repository
      - name: Checkout repo
        uses: actions/checkout@master
        with:
          fetch-depth: 1

      # Install the requirements for the tests
      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Setup pip cache
        uses: actions/cache@v2
        with:
          path: /opt/hostedtoolcache/Python
          key: ${{ runner.os }}-pip-${{ hashFiles('libkisao/python/requirements.txt') }}-${{ hashFiles('libkisao/python/tests/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install pip and setuptools
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade setuptools

      - name: Install the Python KiSAO package
        working-directory: libkisao/python
        run: |
          python -m pip install .

      - name: Install the requirements for compiling the documentation
        run: python -m pip install -r docs-src/requirements.txt

      - name: Compile the documentation
        run: |
          sphinx-apidoc . setup.py --output-dir docs-src/source --force --module-first --no-toc
          mkdir -p docs-src/_static
          sphinx-build docs-src docs

      # If new tag, commit and push documentation
      - name: Configure Git
        run: |
          git config --local user.email "bot@sed-ml.org"
          git config --local user.name "SED-ML bot"
          git config pull.rebase false

      - id: commit-docs
        name: Commit the compiled documentation
        working-directory: libkisao/python
        run: |
          git stash
          git pull
          set +e
          git stash pop
          git add docs
          git commit -m "Updating compiled documentation"
          git checkout .
          git clean -f -d
          if [[ $? = 0 ]]; then
            docsChanged=1
          else
            docsChanged=0
          fi
          echo "::set-output name=docsChanged::$docsChanged"

      - name: Push the compiled documentation
        if: steps.commit-docs.outputs.docsChanged == '1'
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ steps.get-main-branch.outputs.mainBranch }}

  createGitHubRelease:
    name: Create GitHub release
    if: startsWith(github.ref, 'refs/tags/')
    needs:
      - test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@master

      - name: Merge dev branch into deploy branch
        uses: devmasx/merge-branch@v1.3.1
        with:
          type: now
          target_branch: deploy
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub release
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          draft: false
          prerelease: false

  releaseToBioPortal:
    name: Release version to BioPortal
    if: false && startsWith(github.ref, 'refs/tags/')
    needs:
      - test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@master

      - name: Install jq
        run: |
          sudo apt-get update -y
          sudo apt-get install -y --no-install-recommends jq moreutils

      - name: Prepare BioPortal submission
        env:
          TAG: ${{ github.ref }}
        run: |
          version="${TAG/refs\/tags\//}"
          released=$(date --iso-8601=second)
          cp .github/workflows/BioPortal-submission.json .github/workflows/BioPortal-submission-version.json
          jq \
            ".version = \"${version}\"" \
            .github/workflows/BioPortal-submission-version.json | sponge .github/workflows/BioPortal-submission-version.json
          jq \
            ".released = \"${released}\"" \
            .github/workflows/BioPortal-submission-version.json | sponge .github/workflows/BioPortal-submission-version.json

      - name: Submit to BioPortal
        run: |
          curl -X POST \
            -H "Authorization: apikey token=${API_KEY}" \
            -H "Content-Type: application/json" \
            -H "Accept: application/json" \
            -d @.github/workflows/BioPortal-submission-version.json \
            http://data.bioontology.org/ontologies/KISAO/submissions
          echo

  releaseToPyPI:
    name: Release version to PyPI
    if: startsWith(github.ref, 'refs/tags/')
    needs:
      - test
    runs-on: ubuntu-latest
    steps:
      # Check out the repository
      - name: Checkout repo
        uses: actions/checkout@master
        with:
          fetch-depth: 1

      # Install the requirements for the tests
      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Setup pip cache
        uses: actions/cache@v2
        with:
          path: /opt/hostedtoolcache/Python
          key: ${{ runner.os }}-pip-${{ hashFiles('libkisao/python/requirements.txt') }}-${{ hashFiles('libkisao/python/tests/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install pip and setuptools
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade setuptools

      # Create PyPI release
      - name: Create PyPI release
        working-directory: libkisao/python
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          # Install pandoc
          sudo apt-get update -y
          sudo apt-get install -y --no-install-recommends wget

          wget https://github.com/jgm/pandoc/releases -O /tmp/pandocVersions.html
          urlPart=`grep "\.deb" /tmp/pandocVersions.html | head -n 1 | cut -d'/' -f2-7 | cut -d'"' -f1`
          wget "https://github.com/$urlPart" -O /tmp/pandoc.deb
          sudo dpkg -i /tmp/pandoc.deb
          rm /tmp/pandocVersions.html
          rm /tmp/pandoc.deb

          # Copy OWL file and LICENSE so it can be bundled into the Python package
          cp ../../kisao.owl kisao/
          cp ../../LICENSE .

          # Convert README to .rst format
          pandoc --from=gfm --output=README.rst --to=rst README.md

          # Install twine
          python -m pip install wheel twine

          # Create packages to upload to PyPI
          python setup.py sdist
          python setup.py bdist_wheel

          # Upload packages to PyPI
          twine upload dist/*
